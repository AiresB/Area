{
	"info": {
		"_postman_id": "4e4c8c03-bdcd-445e-9ce8-906a37494dd4",
		"name": "Area",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "Home",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.body(\"Hello world!\");",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080"
						},
						"description": "Tests Home routes"
					},
					"response": []
				},
				{
					"name": "register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"error false\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(false);",
									"});",
									"",
									"pm.test(\"response should send user\", function () {",
									"    pm.response.to.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check user\", function () {",
									"   var jsonData = pm.response.json();",
									"   pm.expect(jsonData.user).have.property('username', 'usertest');",
									"   pm.expect(jsonData.user).have.property('email', 'user@gmail.fr');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"test\",\n    \"username\": \"usertest\",\n    \"email\": \"user@gmail.fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/register",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"register"
							]
						},
						"description": "Register route"
					},
					"response": []
				},
				{
					"name": "register with google",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"error false\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(false);",
									"});",
									"",
									"pm.test(\"response should send user\", function () {",
									"    pm.response.to.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check user\", function () {",
									"   var jsonData = pm.response.json();",
									"   pm.expect(jsonData.user).have.property('username', 'usergoogle');",
									"   pm.expect(jsonData.user).have.property('email', 'google@gmail.fr');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"google\": \"token\",\n    \"username\": \"usergoogle\",\n    \"email\": \"google@gmail.fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/register",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"register"
							]
						},
						"description": "Register route"
					},
					"response": []
				},
				{
					"name": "register already register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should not send user\", function () {",
									"    pm.response.to.not.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"Email already used\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"test\",\n    \"username\": \"usertest\",\n    \"email\": \"user@gmail.fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/register",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"register"
							]
						},
						"description": "Register route"
					},
					"response": []
				},
				{
					"name": "register argument missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should not send user\", function () {",
									"    pm.response.to.not.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"arguments missing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"test\",\n    \"username\": \"usertest\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/register",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"register"
							]
						},
						"description": "Register route"
					},
					"response": []
				},
				{
					"name": "login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"error false\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(false);",
									"});",
									"",
									"pm.test(\"response should send user\", function () {",
									"    pm.response.to.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check user\", function () {",
									"   var jsonData = pm.response.json();",
									"   pm.expect(jsonData.user).have.property('username', 'usertest');",
									"   pm.expect(jsonData.user).have.property('email', 'user@gmail.fr');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"test\",\n    \"email\": \"user@gmail.fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/login",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"login"
							]
						},
						"description": "login route"
					},
					"response": []
				},
				{
					"name": "login with google",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"error false\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(false);",
									"});",
									"",
									"pm.test(\"response should send user\", function () {",
									"    pm.response.to.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check user\", function () {",
									"   var jsonData = pm.response.json();",
									"   pm.expect(jsonData.user).have.property('username', 'usergoogle');",
									"   pm.expect(jsonData.user).have.property('email', 'google@gmail.fr');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"google\": \"token\",\n    \"email\": \"google@gmail.fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/login",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"login"
							]
						},
						"description": "login route"
					},
					"response": []
				},
				{
					"name": "login wrong mail",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should not send user\", function () {",
									"    pm.response.to.not.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"User not find\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"test\",\n    \"email\": \"wrong@gmail.fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/login",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"login"
							]
						},
						"description": "login route"
					},
					"response": []
				},
				{
					"name": "login wrong password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should not send user\", function () {",
									"    pm.response.to.not.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"Wrong Password\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"password\": \"wrong\",\n    \"email\": \"user@gmail.fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/login",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"login"
							]
						},
						"description": "login route"
					},
					"response": []
				},
				{
					"name": "login argument missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should not send user\", function () {",
									"    pm.response.to.not.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"arguments missing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"wrong@gmail.fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/login",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"login"
							]
						},
						"description": "login route"
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"error false\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(false);",
									"});",
									"",
									"pm.test(\"response should send user\", function () {",
									"    pm.response.to.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check user\", function () {",
									"   var jsonData = pm.response.json();",
									"   pm.expect(jsonData.user).have.property('username', 'userupdate');",
									"   pm.expect(jsonData.user).have.property('email', 'user@gmail.fr');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"8d22f91b-7557-4ce5-9281-2149346807bc\",\n    \"username\": \"userupdate\",\n    \"email\": \"user@gmail.fr\",\n    \"google\": \"0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/update",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"update"
							]
						},
						"description": "update route"
					},
					"response": []
				},
				{
					"name": "update argument missing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should not send user\", function () {",
									"    pm.response.to.not.have.jsonBody(\"user\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"arguments missing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"userupdate\",\n    \"email\": \"user@gmail.fr\",\n    \"google\": \"0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/user/update",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"update"
							]
						},
						"description": "update route"
					},
					"response": []
				},
				{
					"name": "logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should be okay to process\", function () {",
									"    pm.response.to.not.be.error;",
									"    pm.response.to.have.body(\"Hello world!\");",
									"    pm.response.to.not.have.jsonBody(\"error\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/user/logout",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"user",
								"logout"
							]
						},
						"description": "Logout route"
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Area",
			"item": [
				{
					"name": "create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setGlobalVariable(\"area_id\", jsonData.area.id);",
									"",
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"error false\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(false);",
									"});",
									"",
									"pm.test(\"response should send area\", function () {",
									"    pm.response.to.have.jsonBody(\"area\");",
									"});",
									"",
									"pm.test(\"check area\", function () {",
									"   var jsonData = pm.response.json();",
									"   pm.expect(jsonData.area).have.property(\"userId\", \"3b729bda-22fa-4386-92d6-14aa770d5f76\");",
									"   pm.expect(jsonData.area).have.property(\"actionId\", \"1\");",
									"   pm.expect(jsonData.area).have.property(\"actionDesc\", \"blablabla\",);",
									"   pm.expect(jsonData.area).have.property(\"reactionId\", \"2\");",
									"   pm.expect(jsonData.area).have.property(\"reactionDesc\", \"oui oui oui\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"3b729bda-22fa-4386-92d6-14aa770d5f76\", \n    \"actionId\": \"1\",\n    \"actionDesc\": \"blablabla\",\n    \"reactionId\": \"2\",\n    \"reactionDesc\": \"oui oui oui\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/area/create",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"create"
							]
						},
						"description": "Register route"
					},
					"response": []
				},
				{
					"name": "create argument missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should not send area\", function () {",
									"    pm.response.to.not.have.jsonBody(\"area\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"arguments missing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"actionId\": \"1\",\n    \"actionDesc\": \"blablabla\",\n    \"reactionId\": \"2\",\n    \"reactionDesc\": \"oui oui oui\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/area/create",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"create"
							]
						},
						"description": "Register route"
					},
					"response": []
				},
				{
					"name": "getbyid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"error false\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(false);",
									"});",
									"",
									"pm.test(\"response should send areas\", function () {",
									"    pm.response.to.have.jsonBody(\"areas\");",
									"});",
									"",
									"pm.test(\"check areas\", function () {",
									"   var jsonData = pm.response.json();",
									"   pm.expect(jsonData.areas[0]).have.property('user_id', '3b729bda-22fa-4386-92d6-14aa770d5f76');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"3b729bda-22fa-4386-92d6-14aa770d5f76\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/area/getbyid",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"getbyid"
							]
						},
						"description": "login route"
					},
					"response": []
				},
				{
					"name": "getbyid argument missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should not send areas\", function () {",
									"    pm.response.to.not.have.jsonBody(\"areas\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"arguments missing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"wrong@gmail.fr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/area/getbyid",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"getbyid"
							]
						},
						"description": "login route"
					},
					"response": []
				},
				{
					"name": "update",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"error false\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(false);",
									"});",
									"",
									"pm.test(\"response should send area\", function () {",
									"    pm.response.to.have.jsonBody(\"area\");",
									"});",
									"",
									"pm.test(\"check area\", function () {",
									"   var jsonData = pm.response.json();",
									"   pm.expect(jsonData.area).have.property(\"userId\", \"3b729bda-22fa-4386-92d6-14aa770d5f76\");",
									"   pm.expect(jsonData.area).have.property(\"actionId\", \"2\");",
									"   pm.expect(jsonData.area).have.property(\"actionDesc\", \"blablabla\",);",
									"   pm.expect(jsonData.area).have.property(\"reactionId\", \"2\");",
									"   pm.expect(jsonData.area).have.property(\"reactionDesc\", \"oui oui oui\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"28c4d7a6-6f57-4e83-ac54-54de68cb57d3\",\n    \"userId\": \"3b729bda-22fa-4386-92d6-14aa770d5f76\",\n    \"actionId\": \"2\",\n    \"actionDesc\": \"blablabla\",\n    \"reactionId\": \"2\",\n    \"reactionDesc\": \"oui oui oui\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/area/update",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"update"
							]
						},
						"description": "update route"
					},
					"response": []
				},
				{
					"name": "update argument missing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should not send area\", function () {",
									"    pm.response.to.not.have.jsonBody(\"area\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"arguments missing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"userupdate\",\n    \"email\": \"user@gmail.fr\",\n    \"google\": \"0\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/area/update",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"update"
							]
						},
						"description": "update route"
					},
					"response": []
				},
				{
					"name": "delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"error false\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(false);",
									"});",
									"",
									"pm.test(\"response should send deleted\", function () {",
									"    pm.response.to.have.jsonBody(\"deleted\");",
									"});",
									"",
									"pm.test(\"check deleted\", function () {",
									"   var jsonData = pm.response.json();",
									"   pm.expect(jsonData.deleted).have.property('rowCount', 1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"{{area_id}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/area/delete",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete argument missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should send deleted\", function () {",
									"    pm.response.to.not.have.jsonBody(\"deleted\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"arguments missing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/area/delete",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete no rows deleted",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(500);",
									"});",
									"",
									"pm.test(\"error true\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"response should send deleted\", function () {",
									"    pm.response.to.not.have.jsonBody(\"deleted\");",
									"});",
									"",
									"pm.test(\"check message\", function () {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.message).to.eql(\"Error serveur, couldnt delete item\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"wrongid\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "127.0.0.1:8080/area/delete",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"delete"
							]
						}
					},
					"response": []
				},
				{
					"name": "actionlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should send actions\", function () {",
									"    pm.response.to.have.jsonBody(\"actions\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/area/actionlist",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"actionlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "reactionlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should send reactions\", function () {",
									"    pm.response.to.have.jsonBody(\"reactions\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/area/reactionlist",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"area",
								"reactionlist"
							]
						}
					},
					"response": []
				},
				{
					"name": "about.json",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status test\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"response should send client\", function () {",
									"    pm.response.to.have.jsonBody(\"client\");",
									"});",
									"",
									"pm.test(\"response should send serveur\", function () {",
									"    pm.response.to.have.jsonBody(\"serveur\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "127.0.0.1:8080/about.json",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8080",
							"path": [
								"about.json"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Extern",
			"item": [
				{
					"name": "Weather Paris",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.openweathermap.org/data/2.5/weather?q=Paris&appid=3ca7ac710975ca6f256d01eabc07f6b0",
							"protocol": "https",
							"host": [
								"api",
								"openweathermap",
								"org"
							],
							"path": [
								"data",
								"2.5",
								"weather"
							],
							"query": [
								{
									"key": "q",
									"value": "Paris"
								},
								{
									"key": "appid",
									"value": "3ca7ac710975ca6f256d01eabc07f6b0"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	]
}